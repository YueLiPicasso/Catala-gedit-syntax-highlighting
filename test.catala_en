# Fictional Income Tax Rules

## Article 1

The income tax for an individual is defined 
as a fixed percentage of the individual's 
income over a year.

```catala-metadata
declaration structure Individual :
  data income             content money
  data number_of_children content integer
# like OCaml record type
	
declaration enumeration TaxCredit :
  -- NoTaxCredit
  -- ChildrenTaxCredit content integer  
# like OCaml algebraic data type

declaration scope IncomeTaxComputation :
  input    individual       content Individual
  internal fixed_percentage content decimal
  output   income_tax       content money
  
# like OCaml function type declaration
# a variable can be both input and output
```

```catala
scope IncomeTaxComputation :
  definition income_tax equals
  individual.income *$ fixed_percentage
  # *$ is multiplication (*) with money ($)
```

## Article 2

The fixed percentage mentioned at article 1 is equal to 20 %.

```catala
# distributed definition
scope IncomeTaxComputation:
  definition fixed_percentage equals 20 %
```

## Article 3

If the individual is in charge of 2 or more 
children, then the fixed percentage mentioned 
at article 1 is equal to 15 %.

```catala
scope IncomeTaxComputation :
  definition fixed_percentage under condition
    individual.number_of_children >= 2
  consequence equals 15 %  
```

### Article 3 bis 

The children eligible for application of article 3. 

```catala
# can I use catala-metadata here? 

declaration scope Child :
  input age                    content integer
  output is_eligible_article_3 condition
  # "condition" is like "content bool"
  
scope Child: 
  rule is_eligible_article_3 under condition
    age < 18
  consequence fulfilled
  # "rule" is like "define", but set conditions 
  # to either true or false.
  # fulfilled is like "equals true"
```

```catala-metadata
declaration structure TwoBrackets:
  data breakpoint content money
  data rate1      content decimal
  data rate2      content decimal
  
declaration scope TwoBracketsTaxComputation:
  input brackets     content TwoBrackets
  output tax_formula content money depends on money
  # the output has a function type 
```

## Article 4

The tax amount for a two-brackets computation is 
equal to the amount of income in each bracket 
multiplied by the rate of each bracket.

```catala
scope TwoBracketsTaxComputation:
  definition tax_formula of income equals
    # "income" is a formal parameter of the function
    if income <=$ brackets.breakpoint then
      income *$ brackets.rate1
    else (
      brackets.breakpoint *$ brackets.rate1 +$
      (income -$ brackets.breakpoint) *$ 
      brackets.rate2
    )    
```

## Article 5

For individuals whose income is greater than 
$100,000, the income tax of article 1 is 40% 
of the income above $100,000. Below $100,000, 
the income tax is 20% of the income.

```catala
declaration scope NewIncomeTaxComputation:
  two_brackets scope TwoBracketsTaxComputation
  # add a subscope to context
  input  individual content Individual
  output income_tax content money
  
scope NewIncomeTaxComputation:
  definition two_brackets.brackets equals    
    TwoBrackets {
    -- breakpoint : $100,000
    -- rate1 : 20%
    -- rate2 : 40% 
    } 
  # we have now provided the input to the subscope,
  # which is then expected to return a function
  definition income_tax equals 
    two_brackets.tax_formula of individual.income
```

## Article 6

Individuals earning less than $10,000 are exempted 
of the income tax mentioned at article 1.

```catala
scope NewIncomeTaxComputation :
 definition income_tax under condition
   individual.income <=$ $10,000
 consequence equals $0
```

### Tests

```catala
declaration scope Test1 :
  tax_computation scope NewIncomeTaxComputation
  output income_tax content money
  
scope Test1 :
  definition tax_computation.individual equals
    Individual {
      -- income : $700,000 
      # try also 7,000
      -- number_of_children : 0
    }  
  definition income_tax equals 
    tax_computation.income_tax 
  assertion income_tax = $260,000 
```

### Resolving the conflict 

There are two definitions of income_tax: one is by 
the two_brackets function. the other is set to zero. 
Humans know the set-to-zero takes precedence but for
computer this needs to be explicit. 

```catala
declaration scope NewIncomeTaxComputationFixed:
  two_brackets scope TwoBracketsTaxComputation
  input individual content Individual
  output tax_formula content money depends on money
  context output income_tax content money
  # The output type of this function is not fixed !

scope NewIncomeTaxComputationFixed :
  definition two_brackets.brackets equals    
    TwoBrackets {
    -- breakpoint : $100,000
    -- rate1 : 20%
    -- rate2 : 40% 
    } 
  definition tax_formula of income equals
    two_brackets.tax_formula of income

```
Having specified the first output which is the 
tax_formula, now we show the exception codes that
define the second output. Why bother the first output?

```catala
scope NewIncomeTaxComputationFixed :
  # We provide a labelled definition so that we can
  # later on add exceptions to it.
  label article_5
  definition income_tax equals 
  two_brackets.tax_formula of individual.income
  # Now we introduce the first exception 
  exception article_5
  definition income_tax under condition
    individual.income <=$ $10,000
  consequence equals $0
```
### Article 6 bis

Individuals with 7 children or more are exempted of the income tax mentioned
at article 1.

```catala
scope NewIncomeTaxComputationFixed:
  # one more exception
  exception article_5
  definition income_tax under condition 
    individual.number_of_children >= 7
  consequence equals $0
  
declaration scope Test2:
  tax_computation scope NewIncomeTaxComputationFixed
  output income_tax content money
  
scope Test2 :
  definition tax_computation.individual equals
  Individual {
  -- income : $4,000
  -- number_of_children : 6
  }
  definition income_tax equals
  tax_computation.income_tax
  assertion income_tax = $0
  # omitting the $ sign from $0 causes Catala internal
  # error without useful debugging info for the user.  
```

## Article 7 

The justice system delivers fines to individuals when they committed an offense.
The fines are determined based on the amount of taxes paid by the individual.
The more taxes the invidual pays, the higher the fine. However, the determination
of the amount of taxes paid by an individual in this context shall include
a flat tax fee of $500 for individuals earning less than $10,000.

```catala
# We now compute the basis for determining the 
# fine, which is actually the income tax, with 
# the  exception that people who earn less than 
# $10,000 how are considered to have a flat tax
# of $500.  

declaration scope BasisForFineDetermination:
  tax_computation scope NewIncomeTaxComputationFixed
  input individual content Individual
  output basis_for_fine content money
  
scope BasisForFineDetermination :  
  definition tax_computation.individual equals
    individual
  definition basis_for_fine equals
    tax_computation.income_tax
  definition tax_computation.income_tax under condition
    individual.income <=$ $10,000
  consequence equals $500
  # The "context output" is alias for "input output" 
  # but this does not has the relational sense; rather,
  # the "input output" variable permits a by-pass of
  # of the usual computing routine so that the result
  # can be directed plugged by a certain calling scope.
```

### Test3

```catala
declaration scope Test3:
  basis_of_fine scope BasisForFineDetermination
  output fine_basis content money
  
scope Test3:
  definition basis_of_fine.individual equals
  Individual {
  -- income : $100,000
  -- number_of_children : 5
  } 
  definition fine_basis equals
   basis_of_fine.basis_for_fine
  assertion fine_basis = $20,000 
  # the number of children is irrelevant to 
  # determining the basis of fine when it concerns 
  # people earning less than $10,000. For people
  # who earn more, this number does matter.  
```

